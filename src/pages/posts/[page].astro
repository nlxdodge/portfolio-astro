---
import { getCollection } from "astro:content";
import Button from "../../components/Button.astro";
import Label from "../../components/Label.astro";
import Layout from "../../layouts/Layout.astro";

export async function getStaticPaths({ paginate }) {
  const posts = await getCollection("posts", ({ data }) => {
    return data.draft !== true;
  });
  const sortedPosts = posts.sort(
    (post) => Number.MIN_SAFE_INTEGER + post.data.date.getDate(),
  );
  return paginate(sortedPosts, {
    pageSize: 5,
  });
}

const { page } = Astro.props;
const posts = await getCollection("posts", ({ data }) => {
  return data.draft != true;
});
const allTags = posts.flatMap((p) => p.data.tags);
let tagCounts = allTags.reduce((acc, tag) => {
  acc[tag] = (acc[tag] || 0) + 1;
  return acc;
}, {});
let sortedTags = allTags.sort((a, b) => tagCounts[b] - tagCounts[a]);
let uniqueTags = sortedTags.filter(
  (tag, index) => sortedTags.indexOf(tag) === index,
);
---

<Layout title="Posts | Gerben Veenhof" description="Read all my posts that I have ever writen.">
  <h1 class="center-text">My Posts Collection üìù</h1>
  <div class="tags">
    {
      uniqueTags
        .slice(0, 5)
        .map((tag) => (
          <Label href={"/posts/" + tag.toLowerCase() + "/1"}>{tag}</Label>
        ))
    }
  </div>
  <input id="search" type="text" placeholder="Search all my posts" />
  <div id="posts">
    {
      page.data.map((post: any) => (
        <div>
          <a class="post" href={`/post/${post.slug}`}>
            <h2>{post.data.title}</h2>
          </a>
          <p>{post.data.description}</p>
        </div>
      ))
    }
  </div>
  <div class="pagination">
    {
      page.url.prev ? (
        <Button
          id="button-prev"
          href={page.url.prev}
          icon="mdi:arrow-back-circle"
          nofollow={false}
        >
          Previous
        </Button>
      ) : null
    }
    {
      page.url.next ? (
        <Button
          id="button-next"
          href={page.url.next}
          icon="mdi:arrow-forward-circle"
          nofollow={false}
          flipIcon={true}
        >
          Next
        </Button>
      ) : null
    }
  </div>
</Layout>

<style lang="scss">
  .tags {
    display: flex;
    justify-content: center;
    flex-wrap: wrap;
    margin-bottom: 25px;
  }

  #search {
    width: calc(100% - 26px);
    margin: 0;
    padding: 10px;
    font-size: 1em;
    font-family: $template-default-font;
    border: 3px solid $template-color-accent;
    border-radius: 10px;
    background-color: $template-color;
    color: $template-color-opposing;
  }
</style>

<script is:inline>
  document.querySelector("#search").value = "";
  const original = document.querySelector("#posts").innerHTML;
  const next = document.getElementById("button-next");
  const prev = document.getElementById("button-prev");

  document.querySelector("#search")?.addEventListener("input", async (e) => {
    if (e.target.dataset.loaded !== "true") {
      e.target.dataset.loaded = "true";
      window.pagefind = await import("/pagefind/pagefind.js");
    }

    if (document.querySelector("#search").value == "") {
      document.querySelector("#posts").innerHTML = original;
      if (next != null) {
        next.style.display = "inline-block";
      }
      if (prev != null) {
        prev.style.display = "inline-block";
      }
    } else {
      document.querySelector("#posts").innerHTML = "";
      if (next != null) {
        next.style.display = "none";
      }
      if (prev != null) {
        prev.style.display = "none ";
      }
    }

    const search = await window.pagefind.search(e.target.value);
    for (const result of search.results) {
      const post = await result.data();
      if (post.url.startsWith("/post/")) {
        document.querySelector("#posts").innerHTML += `
        <div>
          <a class="post" href="${post.url}">
            <h2>${post.meta.title}</h2>
          </a>
          <p>${post.meta.description}</p>
        </div>`;
      }
    }
  });
</script>
